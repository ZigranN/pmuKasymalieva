import Service from "../models/Service.js";
import mongoose from "mongoose";

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥
export const getAllServices = async (req, res) => {
    try {
        const services = await Service.find().sort({ name: 1 });
        res.status(200).json(services);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
export const createService = async (req, res) => {
    try {
        const { name, description, price, duration } = req.body;

        if (!name || !price || !duration) {
            return res.status(400).json({ message: "–ü–æ–ª—è name, price –∏ duration –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∏–º–µ–Ω–∏
        const existingService = await Service.findOne({ name });
        if (existingService) {
            return res.status(400).json({ message: "–£—Å–ª—É–≥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
        }

        const newService = new Service({ name, description, price, duration });
        await newService.save();

        res.status(201).json(newService);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
export const updateService = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description, price, duration } = req.body;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å–ª—É–≥–∏" });
        }

        const updatedService = await Service.findByIdAndUpdate(
            id,
            { name, description, price, duration },
            { new: true, runValidators: true }
        );

        if (!updatedService) {
            return res.status(404).json({ message: "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        res.status(200).json(updatedService);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
export const deleteService = async (req, res) => {
    try {
        const { id } = req.params;

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —É—Å–ª—É–≥–∏" });
        }

        const deletedService = await Service.findByIdAndDelete(id);

        if (!deletedService) {
            return res.status(404).json({ message: "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        res.status(200).json({ message: "–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};
