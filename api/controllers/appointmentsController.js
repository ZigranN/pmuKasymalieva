import Appointment from "../models/Appointment.js";
import Service from "../models/Service.js";
import { sendAppointmentEmail } from "../utils/sendEmail.js";
import { sendTelegramMessage } from "../utils/sendTelegramMessage.js";

export const createAppointment = async (req, res) => {
    try {
        const {
            name,
            phone,
            comment,
            photo,
            date,
            slotTime,
            serviceId,
            telegramChatId,
            email
        } = req.body;

        if (!name || !phone || !date || !slotTime || !serviceId) {
            return res.status(400).json({
                message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –¥–∞—Ç–∞, –≤—Ä–µ–º—è, —É—Å–ª—É–≥–∞.",
            });
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
        const existingAppointment = await Appointment.findOne({ date, slotTime, serviceId });
        if (existingAppointment) {
            return res.status(409).json({
                message: "–°–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            });
        }

        // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const newAppointment = new Appointment({
            name,
            phone,
            comment,
            photo,
            date,
            slotTime,
            serviceId,
            userId: req.user._id,
            telegramChatId,
            email
        });

        await newAppointment.save();

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (telegramChatId) {
            await sendTelegramMessage(
                telegramChatId,
                `üëã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É!\nüìÖ <b>–î–∞—Ç–∞:</b> ${date}\nüïí <b>–í—Ä–µ–º—è:</b> ${slotTime}\nüíÖ <b>–£—Å–ª—É–≥–∞:</b> ${serviceId}\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`
            );
        }

        if (email) {
            await sendAppointmentEmail({
                name,
                phone,
                date,
                slotTime,
                comment,
                serviceId,
                email,
            });
        }

        res.status(201).json({
            message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
            appointment: newAppointment,
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏" });
    }
};

export const getAllAppointmentsForAdmin = async (req, res) => {
    try {
        const { date, serviceId, status } = req.query;

        const filter = {};

        if (date) filter.date = date;
        if (serviceId) filter.serviceId = serviceId;
        if (status) filter.status = status;

        const appointments = await Appointment.find(filter)
            .populate("serviceId", "name price duration")
            .populate("userId", "name email phone")
            .sort({ date: 1, slotTime: 1 });

        res.status(200).json(appointments);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
    }
};

export const getAvailableSlots = async (req, res) => {
    try {
        const { date, serviceId } = req.query;

        if (!date || !serviceId) {
            return res.status(400).json({ message: "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ —É—Å–ª—É–≥—É" });
        }

        const allSlots = ["09:00", "12:00", "15:00"];
        const booked = await Appointment.find({ date, serviceId }).select("slotTime -_id");
        const bookedSlots = booked.map(a => a.slotTime);

        const availableSlots = allSlots.filter(s => !bookedSlots.includes(s));

        res.json({ date, availableSlots });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤" });
    }
};

export const getClientAppointments = async (req, res) => {
    try {
        const userId = req.user._id;

        const appointments = await Appointment.find({ userId })
            .populate("serviceId", "name price duration")
            .sort({ date: 1, slotTime: 1 });

        res.status(200).json(appointments);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
    }
};

export const getAppointmentsByService = async (req, res) => {
    try {
        const { serviceId } = req.params;

        const service = await Service.findById(serviceId);
        if (!service) {
            return res.status(404).json({ message: "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        const appointments = await Appointment.find({ serviceId }).sort({ date: 1, slotTime: 1 });

        res.status(200).json({
            service: service.name,
            appointments
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø–æ —É—Å–ª—É–≥–µ:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π" });
    }
};

export const filterAppointments = async (req, res) => {
    try {
        const { date, serviceId } = req.query;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        const filter = {};
        if (date) filter.date = date;
        if (serviceId) filter.serviceId = serviceId;

        const appointments = await Appointment.find(filter)
            .populate("serviceId", "name price duration")
            .populate("userId", "name email phone")
            .sort({ date: 1, slotTime: 1 });

        res.status(200).json({
            message: "–ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
            appointments,
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π:", error.message);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π" });
    }
};


