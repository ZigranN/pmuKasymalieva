import User from '../models/User.js';

/**
 * üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
 * @route POST /api/users
 */
export const createClient = async (req, res) => {
    try {
        const {
            firstName, lastName, phone, email, birthDate,
            notes, comments, childrenCount, childrenAges,
            firstAppointmentDate, nextAppointmentDate, serviceId, additionalServiceIds
        } = req.body;

        const newClient = new User({
            firstName, lastName, phone, email, birthDate,
            notes, comments, childrenCount, childrenAges,
            firstAppointmentDate, nextAppointmentDate, serviceId, additionalServiceIds
        });

        await newClient.save();
        res.status(201).json({ message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', client: newClient });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
};

/**
 * üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
 * @route GET /api/users
 */
export const getAllClients = async (req, res) => {
    try {
        const clients = await User.find();
        res.status(200).json(clients);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
};

/**
 * üìå –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
 * @route PUT /api/users/:id
 */
export const updateClient = async (req, res) => {
    try {
        const { id } = req.params;
        const updates = req.body;

        const updatedClient = await User.findByIdAndUpdate(id, updates, { new: true });

        if (!updatedClient) {
            return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.status(200).json({ message: '–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', client: updatedClient });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
};

/**
 * üìå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
 * @route DELETE /api/users/:id
 */
export const deleteClient = async (req, res) => {
    try {
        const { id } = req.params;
        const deletedClient = await User.findByIdAndDelete(id);

        if (!deletedClient) {
            return res.status(404).json({ message: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.status(200).json({ message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    }
};
