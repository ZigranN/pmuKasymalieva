import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: [true, "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"],
        trim: true
    },
    email: {
        type: String,
        required: [true, "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"],
        unique: true,
        trim: true
    },
    password: {
        type: String,
        required: [true, "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"],
        trim: true
    },
    isClient: {
        type: Boolean,
        default: true
    }
}, { timestamps: true });


// üîê –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
userSchema.pre("save", async function (next) {
    if (!this.isModified("password")) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

// ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
userSchema.methods.comparePassword = function (enteredPassword) {
    return bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model("User", userSchema);

export default User;